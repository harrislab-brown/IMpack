function [ta_LSM, a_LSM, tg_LSM, g_LSM, ta_IIS, a_IIS, ta_ADX, a_ADX] = IMpack_get_data(file, a_LSM_range, g_LSM_range, a_IIS_range, a_ADX_range)

% opens a binary *.dat file generated by the IMpack and returns arrays of
% time and acceleration/angular rate for each of the sensors on the device

% the time arrays have units of seconds, the acceleration is in g, and the
% angular rate is in degrees per second.

% the range arguments should be the measurement ranges that each chip was
% set to while generating the data file. For instance, if the IIS3DWB chip
% was set to a range of +/- 16 g, then a_IIS_range = 16.

% ids for which sensor the data point came from
type_LSM6DSx_accel = 0x1000;
type_LSM6DSx_gyro = 0x0020;
type_IIS3DWB = 0x8000;
type_ADXL37x = 0x0010;

% each data point starts with uint32 timestamp, then 3x int16 data values,
% then uint16 type
bytes_per_data_point = 12;


num_data_points = dir(file).bytes / bytes_per_data_point;

fileID = fopen(file, 'r');
time = fread(fileID, num_data_points, 'uint32', 8);
fseek(fileID, 4, "bof");
data = fread(fileID, [3, num_data_points], '3*int16', 6)';
fseek(fileID, 10, "bof");
type = fread(fileID, num_data_points, 'uint16', 10);
fclose(fileID);

ind = find(type == type_LSM6DSx_accel);
ta_LSM_raw = time(ind);
a_LSM_raw = data(ind, :);

ind = find(type == type_LSM6DSx_gyro);
tg_LSM_raw = time(ind);
g_LSM_raw = data(ind, :);

ind = find(type == type_IIS3DWB);
ta_IIS_raw = time(ind);
a_IIS_raw = data(ind, :);

ind = find(type == type_ADXL37x);
ta_ADX_raw = time(ind);
a_ADX_raw = int16(data(ind, :));


% convert the binary data
ta_LSM = ta_LSM_raw * 1e-6;
tg_LSM = tg_LSM_raw * 1e-6;
ta_IIS = ta_IIS_raw * 1e-6;
ta_ADX = ta_ADX_raw * 1e-6;

a_LSM = a_LSM_raw / 2^15 * a_LSM_range;
g_LSM = g_LSM_raw / 2^15 * g_LSM_range;
a_IIS = a_IIS_raw / 2^15 * a_IIS_range;
a_ADX = double(bitshift(swapbytes(a_ADX_raw), -4)) / 2^11 * a_ADX_range;


end

